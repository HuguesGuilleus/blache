// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package webData generated by go-bindata.// sources:
// web/index.html
// web/style.css
// web/app.js
package webData

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _webIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4d\x8f\xd3\x30\x10\x3d\x37\xbf\x62\x98\x3b\x4d\x05\x17\x84\x6c\x1f\x96\xcf\x1b\x2b\x76\x2f\x1c\x5d\x67\x1a\x9b\x75\x6d\xcb\x9e\x00\xfd\xf7\xc8\x71\xa2\x96\x2e\x8b\x96\x53\xe2\x37\x6f\xde\x7b\xb2\x67\xc4\x8b\xf7\x5f\xde\xdd\x7f\xbb\xfd\x00\x96\x8f\x5e\x75\xa2\x7e\xc0\xeb\x30\x4a\xa4\x80\xaa\xeb\x84\x25\x3d\xa8\x6e\x23\x8e\xc4\x1a\x8c\xd5\xb9\x10\x4b\x9c\xf8\xf0\xf2\x0d\x56\x9c\x1d\x7b\x52\x37\x5e\x1b\x4b\xa2\x6f\xa7\x6e\x23\xbc\x0b\x0f\x90\xc9\x4b\x2c\x7c\xf2\x54\x2c\x11\x23\xd8\x4c\x87\x05\xd9\x9a\x52\x66\x81\x62\xb2\x4b\x0c\x25\x1b\x89\x3a\xa5\xed\xf7\x82\xd7\x3e\x30\xd0\x81\xb2\x12\x7d\xe3\xaa\x4e\xf4\x2d\x56\x27\xf6\x71\x38\x55\x95\xc9\x83\x1b\x24\x3b\x4f\xf7\xa7\x44\x9f\x72\x9c\x92\xea\x36\x35\x07\x18\xaf\x4b\x91\xb8\xd6\xf0\x92\x78\xe3\xa3\xa9\xbc\x8d\x70\xc7\xb1\x65\xd8\xfb\x68\xfa\xdd\x76\xb7\x4d\x61\x44\xd0\x9e\x25\x62\xa3\x24\x55\xe9\xa2\x7f\x9e\xb2\x8b\x47\xba\x96\xae\xd8\x93\xda\xb5\xf8\x4c\xf1\xcf\xe4\x46\xcb\x57\xea\x76\x06\x9f\x92\x6f\x2d\x67\xfd\x86\x7b\xbd\x27\x0f\x87\x98\x25\x05\xbd\xf7\x74\xc7\x79\x32\xac\x6e\xb3\x0b\x0c\x65\x3e\x4c\x99\x8a\xe8\x67\xe2\x62\x18\xd2\xc4\xc0\xa7\x44\x12\x8d\x25\xf3\xb0\x8f\xbf\xe6\x74\x97\x12\x30\x57\x68\xf8\xa7\xdb\xc7\x1c\x03\x3b\xca\x8b\x5f\xa6\xd1\xc5\x00\x87\x05\xfd\x1f\xd3\x55\xe9\xc2\x56\xf4\x93\x3f\x4f\x86\x89\x31\x0f\x65\x4d\xf3\x75\x76\x7a\x0b\xa2\x24\x1d\xce\xe5\x06\xd7\x39\x4b\xba\x7e\x5a\xee\xda\x50\x1f\xfe\x11\x7d\x1e\x9e\xbf\x90\xef\xd6\x7b\x7b\xd4\xb1\x5c\xef\x9f\x3d\x6b\x50\xa3\xc3\x0f\x5d\x2a\x19\xdb\xef\xab\x01\xe1\xa7\x1b\xd8\x4a\x7c\xbd\xdb\x21\xb4\x07\x6e\x07\x25\xfa\x46\xaa\xcb\xd0\x96\xa0\x6e\x45\xdd\xe2\xdf\x01\x00\x00\xff\xff\x89\x12\xda\x20\xd5\x03\x00\x00")

func webIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_webIndexHtml,
		"web/index.html",
	)
}

func webIndexHtml() (*asset, error) {
	bytes, err := webIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web/index.html", size: 981, mode: os.FileMode(420), modTime: time.Unix(1613166762, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _webStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x4d\x6f\xd4\x30\x10\x86\xcf\xf1\xaf\x18\x89\x5b\xa5\x6c\xb7\xc0\x01\x39\x12\x17\xa8\x10\x12\x52\x11\xec\x85\xa3\x37\x9e\x78\x47\xeb\x78\x2c\xdb\x6d\x37\xa0\xfc\x77\xe4\x7c\x74\x13\x14\x7a\xdc\x55\x66\xe6\x79\xde\xd7\x47\xd6\x1d\xfc\x11\x45\xab\x82\x21\x27\x61\xef\x2f\x95\x28\xbc\xd2\x9a\x9c\x99\x7f\xf2\x13\x86\xc6\xf2\xb3\x84\x13\x69\x8d\xae\x12\x45\xc3\x2e\x95\x8d\x6a\xc9\x76\x12\xa2\x72\xb1\x8c\x18\xa8\xa9\x44\x51\xb3\xe5\x20\xe1\x68\x55\x7d\xae\x44\x2f\xc4\xed\x0d\x7c\x7a\x78\xf8\xf1\xf9\x27\xdc\xdc\x0a\xf1\xa6\x66\x0e\x3a\xe6\x9b\x9e\x23\x25\x62\x27\xa1\xa1\x0b\xea\x4a\x14\x16\x9b\x24\x61\x5f\x89\x22\xb1\x97\xf0\x16\xf3\xf5\x23\x07\x8d\xa1\x0c\x64\x4e\x49\x42\x64\x4b\x1a\xf6\xbb\x77\x78\x01\xad\xc2\xd9\x04\xec\x96\xc4\x77\xc3\xcc\x80\x17\xe9\x37\x4a\xb0\x2a\x18\xcc\xbb\x29\xa6\x32\xa6\xce\xa2\x04\xc7\x2e\xff\x95\xf0\x92\x4a\x65\xc9\x38\x09\xc3\xfa\x7c\x4d\xd5\x67\x13\xf8\xd1\x69\x09\x9a\xda\x71\x7d\x7f\xe5\xb6\xf4\x31\x7a\xe5\x32\xbf\xa6\xe8\xad\xea\x24\x90\xb3\xe4\xb0\x3c\x5a\xce\xca\x45\x4b\xae\x7c\x26\x9d\x4e\x12\xee\x46\x85\xe5\xa1\xec\x38\xe7\x72\xf8\xfa\xed\x1e\x0e\xbf\xbe\xdf\x8f\xd1\x24\xb2\x78\xe8\x3c\x7e\x09\xfc\xe8\x5f\x4b\x68\x0e\x26\x25\x6e\xc7\xbc\x5e\xfa\x5b\xb5\xb7\xa9\xdd\x0b\xb1\x9b\x2f\xbd\xaa\xb1\x58\x39\x75\x30\xb4\xf2\x9f\x06\x9e\x30\x24\xaa\x95\x9d\x3d\x47\xba\x15\xce\xee\xfd\xc8\xbd\x15\xf1\x46\x65\xfd\x95\x53\x9e\xf2\x1b\xcc\xb4\xcb\xe1\x97\x72\xae\x3e\xd4\x9a\x95\xd3\x2c\x33\xf5\xf1\x21\x03\xac\x06\xfc\xea\xf3\xe9\x61\x6c\xa7\x39\x18\xef\xff\xa9\xb3\x46\x97\x30\xac\x97\x4e\xb4\x7e\x8b\xa4\x17\x7f\x03\x00\x00\xff\xff\x9e\xa4\x09\xf8\x73\x03\x00\x00")

func webStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_webStyleCss,
		"web/style.css",
	)
}

func webStyleCss() (*asset, error) {
	bytes, err := webStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web/style.css", size: 883, mode: os.FileMode(420), modTime: time.Unix(1588683719, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _webAppJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x39\x7b\x6f\xdb\xb6\xf6\xff\xe7\x53\x28\xc2\x26\x93\x11\xa3\xd8\x4e\x5a\x0c\x51\xd9\xa2\x4b\xfb\xfb\x35\x40\x7b\x7b\x51\xb7\x77\x5d\x32\x43\xa0\x25\x3a\xe6\x22\x8b\x06\x45\xc7\x8e\x5d\x7d\xf7\x0b\x3e\x24\x51\xb6\xd3\xed\x6e\x43\x80\x48\x3a\x3c\x3c\x2f\x9e\x17\x8f\xfd\x65\x49\xbd\x52\x0a\x96\x4a\x3f\x7e\x20\xc2\x4b\x92\x07\x92\x2f\x69\x89\x81\x9c\xb1\x32\x08\xd4\xff\xa8\x06\xc2\x6f\xdf\xa6\xcb\x22\x95\x8c\x17\x80\xc3\xad\xc2\x2f\xb1\x7c\x5c\x50\x3e\xf5\x46\x8f\xf3\x09\xcf\x31\xc6\x7e\x8d\xe2\x07\x81\x01\x46\x4c\x52\x41\x24\x17\x68\x8e\xcb\x20\xe0\xb7\xe5\x18\x31\xdc\x8f\xd9\x14\xcc\xa1\xa0\x72\x29\x0a\x6f\x1e\xa5\x24\xcf\x01\x87\x0a\xca\x83\xc0\x52\xe5\x51\x4e\x8b\x3b\x39\x53\x74\x8b\xe5\x7c\x42\x85\x6f\x77\x6c\x0b\xba\x96\x97\x8d\x38\x70\x6b\xf6\xb1\x97\xb8\xde\x03\x39\x7e\xe0\x2c\xf3\xfa\xb1\xdd\xa1\x95\xb8\xe4\x4a\x02\x16\x86\x63\x94\xf1\x82\x5e\x1e\xf3\x2a\xae\xaa\x58\xce\x04\x5f\x79\x05\x5d\x79\x9f\x1f\x17\xf4\xad\x10\x5c\x80\xf2\x95\xff\x71\xf2\x3b\x4d\xa5\xc7\x4a\xaf\xe0\xd2\xd3\x7a\x4c\x72\x1a\xf9\x97\xfe\x8e\x6a\x35\x4a\x46\xa7\xac\xa0\x59\xe4\xc3\xb8\xb2\x06\x15\x94\x64\x3b\xe6\x54\xa0\x8e\x31\x51\x61\xcc\x39\xff\xae\x39\xf9\xed\x0e\xd7\xb1\xb2\xd6\x71\x63\x44\xae\x39\x32\xdc\x18\x13\x09\x44\x04\xbe\x1d\x23\x1a\x4b\xf1\xb8\x5d\xcd\x58\x4e\x01\x28\x30\xb6\x96\xf9\xf6\xad\x38\x3d\x7d\xd9\x87\x41\x70\x0c\x04\x66\x91\xb2\x29\x80\x30\x52\x96\x81\x44\x44\x8b\x65\x39\x03\x22\xd2\x86\x83\x71\x75\x94\x12\x99\xce\x00\x55\xd6\x81\x5b\x8a\xb7\xfa\xed\x52\xff\xaf\xe2\xea\x68\xca\x0a\x92\xe7\x8f\x5b\xc5\x8b\x4d\x81\x08\x82\x63\xa1\x69\x05\x01\x98\x63\x76\xeb\x1b\x39\xfd\x31\x84\x56\x44\x06\x9d\x6d\x6c\x0a\x28\x34\x07\x41\x23\x4d\x34\xae\xaa\x23\xab\x1b\x11\xd6\xa0\x57\x9c\x8b\x8c\x15\x44\x52\xbc\x5d\x10\x51\xd2\xd6\x09\x4a\x63\x44\x89\xcb\xa8\x5c\xe4\x4c\x82\x1e\xea\x69\x87\x92\xd6\x25\x8e\xf1\x10\x1e\x19\x0e\xfe\x75\xf1\x40\x72\x96\x79\xe5\x63\x21\xc9\xda\x9b\x72\xe1\xa5\x0d\xe9\x52\x07\x45\x71\xe7\x5b\xdf\xb9\xd5\x9c\xae\x0b\x09\xe4\x6d\x7f\x0c\x91\xf3\x39\x18\xc3\x71\x5c\x21\xc9\x47\x7a\x47\x2b\xcd\x1a\x6d\xe0\xd6\x4a\xbf\x0e\x7b\xa8\x17\x6e\xe2\x0a\x55\x71\x8d\xe0\x2d\x4b\x2a\xde\xf0\x55\x91\x73\x92\x81\x09\x2a\xc8\x9c\x1a\x05\x96\xf8\xcb\xa7\xf7\x51\x2a\x28\x91\xd4\x78\xe0\x97\x4f\xef\xc1\x04\x6a\xfd\x09\xce\x78\xba\x9c\xd3\x42\x5a\x8c\xb7\x39\x55\x5f\xa0\x47\x7a\x30\x6e\xd6\x26\x3c\x7b\x8c\xc8\x62\x41\x8b\xec\x6a\xc6\xf2\x0c\x10\x18\x93\x68\x26\xe8\x14\x2f\x63\x12\x65\x96\x2f\x56\x5c\x63\x12\xa5\x39\x4b\xef\x81\x42\x11\x74\xce\x1f\x28\x80\xb1\x92\x41\xd0\x07\x7e\xef\xc8\xb0\x54\xe7\xa5\xa4\xf8\xf4\xf6\xff\xaf\x3f\xfe\x2b\x19\x5d\xdf\xbc\xc5\x83\xe7\x27\xe7\x43\x2d\xdb\x24\x27\xe9\xfd\xf5\x9c\xdc\x51\xec\x44\xa6\x5a\x11\x64\x85\x55\x74\x7d\x61\x85\xfc\xe9\x2a\x27\xf3\x05\xcd\x5e\x0b\x41\x1e\x81\x43\xe9\xc4\x7d\xbf\x80\xf1\x94\x0b\x60\x3c\xba\x1f\xb3\x17\x82\xac\xec\x31\xc6\x2c\xc4\x17\x70\x2b\xc8\xea\x96\x85\xe7\x63\x3c\x7c\xf6\x2c\x6e\x1c\x45\x71\xd1\x22\xbc\x21\x92\x00\x41\x56\xc8\xa1\xea\xbe\xc3\xb8\x02\xc6\xa4\x9f\x59\x4e\x55\xd8\xc7\xa0\x91\xba\x06\xc1\x6d\xfd\x76\xeb\x4f\x72\x9e\xfa\x63\x6c\x9e\xb1\x03\x67\x7c\x4e\xf5\x82\x7e\x71\x56\x66\x94\xdd\xcd\xa4\x5a\xb2\x6f\x71\x05\x1b\xd2\xdf\xbe\x35\xaf\x78\x5b\x41\x23\xca\x7f\x18\x5d\x51\x81\x81\x63\xbe\xc6\x5f\xcc\x9a\x35\x68\x42\x4c\x7a\x51\x19\x05\xab\x7f\xb1\xce\x2d\x82\xde\x31\x5e\x94\x18\x24\x04\x6f\x2b\x94\x90\xdb\x9a\x47\xa4\xc4\x1e\xeb\x43\xf8\x40\x16\x00\x76\xd7\x94\xe4\x4f\x2d\x1a\xd9\xbb\xab\xd0\xb0\x2b\xa5\x58\xa6\xb2\x5d\x31\x50\x95\xc3\x70\x87\xaf\x81\x2f\x78\xf9\x15\xf7\x9b\xf7\x9b\xfa\xbd\x64\x1b\x8a\x9d\x93\x69\x43\xe4\x07\xc0\x32\xa3\x2f\x6d\xdd\xfe\x8e\x4a\xeb\xf3\x3f\x3f\x5e\x67\x0a\x43\xa7\x41\xda\x84\xb6\x5d\xf5\x7a\x7e\xc8\xb2\xd0\xef\x79\x05\xf7\xa6\x7c\x59\x64\x1e\x2b\xbc\x37\x1f\x3f\xd4\x51\xed\xd1\xb8\x3a\xd2\x12\xe8\xc8\x2f\x3f\x69\xe3\xe1\x1f\x40\xcf\xfd\xee\x59\xad\x0c\xec\xe7\x9c\xa7\x2d\x86\xfa\xea\xae\x8f\x8c\x45\x1a\x0c\xf3\xdd\xe0\x90\xe2\x81\x94\x09\xcd\x35\x82\xfe\x18\x66\x3d\x73\xf4\x29\xee\xa2\x28\x3d\xaf\x78\x21\x55\x4e\xee\x69\x2c\xa5\x65\x5a\x6b\xd9\xbb\x22\x85\x2e\x39\x26\x0b\x78\x66\x5f\xaf\xc3\x27\x95\x6b\x9c\xc6\x3f\x80\x9e\xb4\x87\x61\xe4\x8d\x48\x96\xbd\x7d\xa0\x85\x7c\xcf\x4a\x49\x0b\x2a\x40\x4f\xc7\x7f\x0f\x39\x6e\x67\x4d\x94\x34\x27\x7a\x35\x23\xc5\x1d\x05\x9d\x73\x85\x71\x05\x3b\xf4\x95\x1f\xfd\x63\x0c\x14\xb1\x5d\x0e\xef\xb4\x33\xfe\x53\x2c\x8c\x6b\x6b\x1e\xea\x08\xa6\x82\x17\x92\x51\xa1\x4e\x87\x16\xaa\xd4\xff\x9f\x85\xd4\x07\xd8\x85\xe2\x7a\x43\x94\xce\x68\x7a\x4f\xb3\xb8\x01\x1c\x10\x4f\xf3\xee\xc8\x97\xfc\x29\x9a\x06\x2b\x13\x64\xf5\x3a\xcf\x41\x23\xac\x89\xbd\xb2\x95\xb5\xeb\x6a\x2e\x0c\x5b\xdc\x86\x64\xfd\xfd\x3f\x4b\xf9\x04\xbd\x03\x22\x4e\xa9\xea\x15\x7a\x36\x21\x45\xbf\x97\x2a\x92\x22\x39\xa3\x45\x9b\xdc\x04\x5d\x34\x87\x24\xe8\x42\x23\xe9\xdd\xbb\x78\xb6\xb2\xd3\x64\x80\x12\xa2\x7b\x99\xba\x36\x88\x32\x19\xe0\xba\x41\x55\x88\x48\x41\x92\x01\x56\x0f\xdb\xd0\xc4\xc7\x06\xa6\x7b\x91\x78\x7f\xdd\x10\x4f\x2d\x30\x19\x98\x86\xc7\x2a\x65\x15\xd8\xc9\xa3\x51\x49\x25\x48\x93\x01\x2a\x96\x79\x0e\x9f\x44\xd5\x69\xf5\xcf\xe1\xda\x2c\xbb\x83\x5c\x35\x4d\x97\x12\x0c\x6e\x69\x32\x68\xda\x2e\x05\x39\xd4\x76\x69\x1d\x54\xef\xd5\x2a\x1d\x04\xaa\x20\x68\x95\x8d\xb9\x21\x4c\x88\x69\xc1\x14\x70\xb7\x0b\x4b\x06\x75\x1f\x96\x0c\xda\x4e\xec\xc0\x21\xaf\x58\x91\xf1\xd5\x01\x37\x52\xbd\xc5\xd3\xa1\x28\xa8\x4a\xf9\x7f\x40\xc2\x20\xfd\x4d\x22\xf7\xf4\x51\xb5\x3a\x0e\x15\x0a\xb7\xe5\x8a\x69\x93\x46\xf7\xf4\x11\x6e\x53\x52\x52\xaf\x77\xda\xbb\x34\x64\x37\x9c\xcf\x3f\x2e\x25\x48\x76\xb2\xf1\x8a\x65\x72\x76\x36\x44\xbb\x70\x73\x6e\x67\x43\x18\x4f\x04\x25\xf7\xb1\x21\x17\xba\xe4\xae\x8b\xbf\x49\xed\xb5\x10\x7c\xf5\x9e\x4e\x65\x4d\x55\x55\xd2\x53\x9c\x34\xd5\xf3\xec\x62\x1f\xff\x93\x4e\x94\xce\x86\xf0\x0f\x36\x7c\x59\x38\xd8\x37\x7f\x44\x5e\x75\xae\x2e\xfe\x77\xa8\xf7\x5d\x29\x70\xe2\xd6\xff\xe4\x70\x03\xe0\xee\x2e\xeb\xdd\xad\x95\x24\xff\x39\xe7\x93\x36\x3f\x4c\x1a\xd7\xe8\xf6\xd4\xc7\x18\xab\x30\x0a\x02\xf5\x66\xae\x3c\xaf\x26\x97\xaa\x5b\xd1\xfb\x21\x6a\x7a\x8a\x9c\xa7\x44\x91\x8a\x66\xbc\x94\xaa\x27\x0e\xfd\xc4\x0f\x3f\x10\x39\x8b\xa4\x58\x16\xa9\xdb\xa6\x9e\xb5\x42\xc3\x16\x6d\x9a\x73\x2e\x40\xab\x67\x17\x2b\x3a\x8c\x75\xb3\x83\xb5\x28\xee\x7c\xed\xd0\x46\x9d\x38\xa3\x53\xb2\xcc\xe5\xa5\xfd\xac\x63\xb0\x6d\x3e\x22\x56\x14\x54\x7c\xa6\x6b\x89\x7b\xaf\x7a\x71\xb2\xd7\xcd\x1c\x44\xe8\xc4\xf0\x8e\x6d\xf7\x63\x68\xce\x97\xa5\xbe\x14\xb8\x51\xa4\x50\xea\xa4\x3c\x44\x75\x37\x3a\xd1\x8f\x35\x76\x0c\xe7\x98\x24\xd4\xbb\xa2\x35\x3c\x79\xc2\x9a\x68\x73\x78\xe7\x8d\xdd\xf9\xf8\xf4\x4e\x61\x99\x1a\x03\xaf\xcf\xdc\x46\x1f\x89\x8d\xbb\xb8\xe9\x2e\x2e\xd6\x78\x7d\x2a\xd6\x2e\x65\xb4\xd8\xe0\xcd\xa9\xd8\xb8\xb0\xf8\x3b\xa6\x5f\x87\x3e\xf2\xfc\x70\xf3\x7d\xfb\x0b\x8b\x26\xba\x78\xa6\xa4\xba\xe7\xd4\xeb\x54\xb8\x24\x6d\xeb\x1b\x00\xc9\xa4\x8e\x33\xb3\xed\x8e\x4a\xd0\x5e\x89\xa3\xfa\x1a\x0a\xc4\x1a\x89\x0d\x84\xb0\x09\x81\xc4\x89\x81\x64\x72\x79\x3b\x86\x10\x25\x19\x4e\xd2\xa6\x48\x26\x99\x29\x90\x2e\xb4\x9e\xf2\x24\x99\x2d\x8a\x6c\x0a\xb4\x29\xc9\xa4\x04\x8b\xf5\x69\x19\xad\x4f\x06\xcf\xe1\x8b\x41\x3f\x08\x5a\xf8\xe6\xb4\x8c\x36\x16\x5e\xf7\x0f\x4f\x28\x5b\x46\xfa\x06\x6a\x02\xbe\x72\xca\xdd\xd0\x94\xbb\x61\x5b\xee\x86\x07\xcb\x5d\x92\x05\x41\x2d\xba\x29\x73\x49\xba\x57\xe4\x92\x74\xaf\xc4\x0d\x9b\x12\x37\x6c\x4b\x9c\xbe\x47\x68\x57\x9b\x2c\xa5\xe4\x45\x09\xed\xb5\x32\x76\xf3\xae\xc1\x50\x11\xa1\x72\xc7\xd7\xd8\x4d\x9a\xdd\xb5\x5f\xff\x52\xc0\xad\x66\x94\xe6\x87\x83\x2d\xb3\x0c\x32\x9a\x4b\xf2\xab\x3a\x8d\xec\x65\x63\xe2\xba\x74\xd9\x30\x43\x75\xd0\xc4\xd5\x11\xcd\x4b\xea\x29\xec\x17\x1d\xec\xeb\xe2\x10\xf2\x01\x99\xab\x23\x73\xfb\x8c\x16\x82\x4b\xae\x5a\x69\xa7\x9f\x6e\x2f\xfb\x52\xcf\xe1\xe4\x31\x6e\x3a\x6e\xb8\x6d\xaf\x84\x32\xde\x25\x5c\xc5\x7b\x64\x8d\x58\x2d\xc9\x15\x9a\x19\xa2\x75\xac\xbf\x74\xa7\x04\x83\xe7\xcd\x09\xb5\x15\xa6\x79\x3b\x19\x86\x2b\xe7\xba\xd9\xbc\x9d\x0c\xc3\x59\x7b\xf5\x3c\xc1\xc3\xf8\x09\x41\x3e\x2e\xe5\x77\x24\x79\xe1\x26\xa3\xef\x4b\x72\x36\x3c\x5d\x9d\x0d\x0f\xc9\x72\x36\x3c\x9d\xd5\x2b\xba\x76\x1e\x96\xc6\x74\x3b\xee\x58\xe5\x50\x47\x81\x6d\x23\xa4\xe3\xeb\x17\x05\xd9\xf5\x36\xd3\x60\x74\xf0\xcc\x95\x6a\xef\x6c\xf6\x65\xb0\x8b\xbb\xb3\x1d\x9a\x9c\xeb\xae\xbc\x7b\xf1\x8c\xa6\x2c\xcf\x47\xf2\x31\xa7\xb8\xa7\xe7\x42\x7b\x57\x53\x8d\xf1\x89\xa6\x12\xf4\x51\x1f\x1d\x52\x67\x17\x58\x5f\xd7\x14\x57\xc7\xb8\xfa\xdb\x31\xa9\xfe\x1e\xe1\xc6\xa4\xfa\xfb\x97\xdd\xeb\xb5\xe6\xa0\x97\xde\xed\x2e\x19\x3e\x66\x36\xd4\xba\x72\x37\x2b\x4f\xda\xac\xdc\x69\xe8\x1b\xf4\xb1\x6a\x2f\x4b\xa0\xd2\x6c\x8a\x93\x49\x9b\x66\x53\x9b\x66\x1d\xa8\x31\xe4\xbd\x4a\x5d\x26\xcd\x6a\x16\x19\x36\xa3\x62\x37\xc1\xeb\xc9\x23\xb8\x87\x68\x08\xd1\x1a\x27\xd9\x6d\x7f\x8c\x36\xea\x39\xd0\xc3\x60\xb0\x0e\x07\xf0\x64\xf4\xf2\x6b\x10\xac\x4f\x46\x2f\xbe\x86\xbf\x04\x01\xd8\x18\xd8\x4d\x10\x6c\x4e\x46\x2f\x6e\xc2\x77\xd6\x79\xee\xa8\x54\xd7\x0f\x70\x8f\xd6\x68\x83\x3e\xc3\x4e\xfe\x3d\x37\xf9\xf7\xbc\xcd\xbf\xe7\x87\xf3\x6f\xaa\xf2\x6f\xea\xe6\xdf\xc9\x7e\xfe\x9d\xec\xe5\xdf\xf3\x26\xff\x9e\x37\xf9\xf7\x80\xcf\x59\x19\x5b\x9f\x33\xc2\x4a\xab\x82\x72\x49\xad\x83\x06\xa2\x5a\x2d\x53\x7b\x1b\xdc\x06\x6e\xca\xcf\x52\xd0\xd2\xac\xc1\x83\x7e\xde\x10\x38\xc0\x75\x67\xe8\xa6\xc7\x93\xf3\x3b\xdc\x75\x81\xb1\x2e\xcb\xf7\x7a\x62\xc3\xe6\x77\xc7\xba\x04\xd7\xe9\x41\xe1\xc7\xbb\xf8\xea\xd6\x77\x8f\xda\xf9\x29\xb4\xa3\xfc\x66\x9a\x09\x9e\x9c\x62\xb2\x88\x9b\x51\xee\xde\x95\x7d\x8f\x3e\xab\x6f\x9f\xdd\x93\x97\xca\x0a\x2c\x2a\x45\x8a\x65\xe8\x9f\xf9\xe1\x5a\x37\xac\x1b\xdb\x90\xd6\xd3\xb2\x56\xba\x27\x8c\xd6\x5a\x77\xc7\x70\x07\xcd\x96\xe3\xdd\x3e\xc6\x18\x4c\x8f\x85\x23\x56\x9a\xf1\x70\x0e\x1b\xbb\xe5\xee\xcc\xd1\x6a\x74\x3b\xae\x27\x0d\xbe\x9d\x49\x74\xc4\xff\xbd\xe4\x85\xff\x57\xa7\x0e\x79\x6d\xc7\x0e\xc7\x3c\x9a\x93\x05\x70\x7f\x73\x50\xbd\x4d\xce\x05\xf6\x67\x65\x0e\x7e\x2b\x7e\x93\xed\x9f\x1f\x9a\xfe\xa6\xfe\x3d\xa2\x07\x23\x41\xb3\x65\x4a\x1d\x02\x28\xad\xa5\x01\x65\x98\x46\xe9\x8c\x88\x2b\x9e\xd1\xd7\x12\xf4\x21\xfc\x71\xf8\xec\x79\x5c\xa1\x3e\x54\xad\xe3\xa0\xdf\xff\x11\x79\xcf\xfa\x3f\xc2\xe6\x4c\xca\xb8\x82\x87\x0f\xb5\x1d\x7a\x39\x17\x8a\xdb\xf1\x53\x79\xbd\x1b\x64\x6b\x82\x36\x04\x49\x54\x2e\xc5\x94\xa4\x14\x19\x0b\xd4\xe9\xfe\x42\xa5\xfb\xdd\x3a\x5f\x17\xbf\x9d\xdc\x8b\xd6\x02\xaf\xc9\xc9\xe8\xb4\xc9\xd6\x68\x23\xf0\xc6\x85\xdc\x28\x5a\x96\x93\xc7\x8a\x52\x92\x22\xa5\x7c\xea\xbd\xfb\xfc\xe1\xbd\x76\x37\x3b\xcf\xed\x96\x3c\x55\x40\x98\x5a\x1d\xcd\x39\x97\x33\x56\xdc\xbd\xd5\x13\xaa\x0c\x4f\x49\x5e\xd2\xbd\x62\xa3\x94\x34\x91\x54\x2b\xb5\x16\x68\x23\xd0\x08\x8d\xea\x06\x69\x8f\xfe\x62\x29\xdb\x9f\x12\xba\xdb\x54\xc9\xb2\x5b\xeb\x96\xa0\x3b\xc7\xdb\x97\xb6\x94\x82\xdf\x53\x5b\x12\xb9\xd0\x73\xb6\x3d\x31\x73\x56\x50\x5d\xb8\xf1\x30\x7a\xb6\xb7\x6a\x48\x00\x95\x15\xfe\x4d\xe4\x6c\xf8\x06\xf8\x1f\xfc\x70\x2d\x42\x5f\x5d\x3f\xd4\xe3\xc1\x0f\x47\xa1\xef\xcd\xcc\xe3\xc1\x0f\x4f\xd5\x73\xe3\xc3\x7d\x49\x47\xf6\x50\xdd\xb2\x66\x0e\xda\x1d\xa9\xd9\xa3\x47\xf5\x4a\x32\xc0\xf5\x6b\x53\xd2\xda\x35\x53\xda\x9e\xc6\xad\xef\x13\xce\x0e\x53\xf0\x9e\xee\x1e\x6c\x78\x3d\xdd\x3d\xac\x45\x68\xae\x21\x27\x23\xf7\x66\x87\x36\x0a\xbe\xd9\x87\xff\x84\x7e\xea\x0c\xd6\x2e\x4c\xa5\xbb\x68\x2b\xdd\xc5\xc1\x4a\xd7\xca\x1c\x04\xbb\x2a\x9b\xca\xd7\x28\xbb\x5b\xff\xea\x85\xbd\x2a\x78\xd1\x54\xc1\x8b\xb6\x0a\x56\x75\x74\x9b\x48\x8d\x2b\x00\x61\x7c\xf0\x27\xa1\x39\x61\xea\x5b\xf9\x43\xfd\xeb\x50\x5c\x1d\x35\x53\x0d\xd5\x3c\x3c\x8e\x24\x91\x14\x63\x3d\x92\x63\xc5\x5d\xef\x55\xb3\xbc\x7f\xf3\x78\xf3\xf1\x83\xfe\xc9\xa1\x90\xef\x39\xc9\x68\xd6\x43\x8a\x03\xda\xf2\x22\xa5\x97\x52\x2c\x69\x05\x2f\x0d\x4f\x23\xd4\x7f\x03\x00\x00\xff\xff\xd6\xea\xb8\x22\x40\x20\x00\x00")

func webAppJsBytes() ([]byte, error) {
	return bindataRead(
		_webAppJs,
		"web/app.js",
	)
}

func webAppJs() (*asset, error) {
	bytes, err := webAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web/app.js", size: 8256, mode: os.FileMode(436), modTime: time.Unix(1613167345, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"web/index.html": webIndexHtml,
	"web/style.css":  webStyleCss,
	"web/app.js":     webAppJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"web": &bintree{nil, map[string]*bintree{
		"app.js":     &bintree{webAppJs, map[string]*bintree{}},
		"index.html": &bintree{webIndexHtml, map[string]*bintree{}},
		"style.css":  &bintree{webStyleCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
