// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package webData generated by go-bindata.// sources:
// web/index.html
// web/style.css
// web/app.js
package webData

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _webIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x6e\xe3\x20\x10\x86\xcf\xe6\x29\xd8\xb9\xaf\x6d\xed\x5e\x56\x2b\xe0\x90\xdd\xd5\xf6\xd6\xaa\xca\xa5\x47\x82\x27\x86\x76\x6c\x10\xe0\x56\x79\xfb\x0a\x93\x28\x6d\xaa\x48\x39\x61\xfe\xf9\xe7\x9b\xf1\x0c\xe2\xdb\xdf\xfb\x3f\xdb\xa7\x87\x7f\xdc\xe6\x89\x14\x13\xe5\xe0\xa4\xe7\x51\x02\xce\xa0\x18\x13\x16\xf5\xa0\x58\x23\x26\xcc\x9a\x1b\xab\x63\xc2\x2c\x61\xc9\xfb\xef\xbf\xa0\xe8\xd9\x65\x42\xb5\x21\x6d\x2c\x8a\xae\xde\x58\x23\xc8\xcd\x2f\x3c\x22\x49\x48\xf9\x40\x98\x2c\x62\x06\x6e\x23\xee\x8f\x4a\x6b\x52\x5a\x01\xc9\x44\x17\x32\x4f\xd1\x48\xd0\x21\xb4\xcf\x09\x2e\xeb\xf0\x01\xf7\x18\x95\xe8\xaa\x57\x31\xd1\xd5\xb6\x98\xd8\xf9\xe1\x50\x28\x0b\x71\x37\xc8\xec\x08\xb7\x87\x80\xff\xa3\x5f\x82\x62\x4d\xe9\x83\x1b\xd2\x29\x49\x38\xc5\xe0\xa3\x71\x43\xde\x14\x5f\x23\xdc\x34\xd6\x1e\x76\xe4\x4d\xd7\xb7\x7d\x1b\xe6\x11\xb8\xa6\x2c\x01\xaa\x25\xa8\x62\x17\xdd\x6d\x64\xe7\x27\xbc\x44\x17\xed\x2a\xbb\x04\x6f\x84\xdf\xa1\x1b\x6d\xbe\xa0\xdb\x55\xbc\x86\xaf\x29\x95\x2f\xba\x85\xce\x43\x33\xde\xc7\x21\x1d\xcb\xaa\x47\x1c\x9d\x9f\x7f\x73\x91\x82\x9e\xcf\xe1\x2a\x97\x15\x04\x5d\x0e\x72\xa7\x84\x32\x93\x2f\xf6\x75\xae\x9f\xcd\xa7\xa2\x46\xcf\xaf\x3a\x15\x2b\xd4\xcf\x1f\x03\xf0\x37\x37\x64\x2b\xe1\x67\xdf\x03\xaf\xff\x51\x2f\x4a\x74\xd5\x54\x76\x5e\x77\x5d\x96\xbf\x3e\xd6\xf7\x00\x00\x00\xff\xff\x43\x22\xb9\x10\xbd\x02\x00\x00")

func webIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_webIndexHtml,
		"web/index.html",
	)
}

func webIndexHtml() (*asset, error) {
	bytes, err := webIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web/index.html", size: 701, mode: os.FileMode(420), modTime: time.Unix(1588669704, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _webStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x4d\x6f\xd4\x30\x10\x86\xcf\xf1\xaf\x18\x89\x5b\xa5\x6c\xb7\xc0\x01\x39\x12\x17\xa8\x10\x12\x52\x11\xec\x85\xa3\x37\x9e\x78\x47\xeb\x78\x2c\xdb\x6d\x37\xa0\xfc\x77\xe4\x7c\x74\x13\x14\x7a\xdc\x55\x66\xe6\x79\xde\xd7\x47\xd6\x1d\xfc\x11\x45\xab\x82\x21\x27\x61\xef\x2f\x95\x28\xbc\xd2\x9a\x9c\x99\x7f\xf2\x13\x86\xc6\xf2\xb3\x84\x13\x69\x8d\xae\x12\x45\xc3\x2e\x95\x8d\x6a\xc9\x76\x12\xa2\x72\xb1\x8c\x18\xa8\xa9\x44\x51\xb3\xe5\x20\xe1\x68\x55\x7d\xae\x44\x2f\xc4\xed\x0d\x7c\x7a\x78\xf8\xf1\xf9\x27\xdc\xdc\x0a\xf1\xa6\x66\x0e\x3a\xe6\x9b\x9e\x23\x25\x62\x27\xa1\xa1\x0b\xea\x4a\x14\x16\x9b\x24\x61\x5f\x89\x22\xb1\x97\xf0\x16\xf3\xf5\x23\x07\x8d\xa1\x0c\x64\x4e\x49\x42\x64\x4b\x1a\xf6\xbb\x77\x78\x01\xad\xc2\xd9\x04\xec\x96\xc4\x77\xc3\xcc\x80\x17\xe9\x37\x4a\xb0\x2a\x18\xcc\xbb\x29\xa6\x32\xa6\xce\xa2\x04\xc7\x2e\xff\x95\xf0\x92\x4a\x65\xc9\x38\x09\xc3\xfa\x7c\x4d\xd5\x67\x13\xf8\xd1\x69\x09\x9a\xda\x71\x7d\x7f\xe5\xb6\xf4\x31\x7a\xe5\x32\xbf\xa6\xe8\xad\xea\x24\x90\xb3\xe4\xb0\x3c\x5a\xce\xca\x45\x4b\xae\x7c\x26\x9d\x4e\x12\xee\x46\x85\xe5\xa1\xec\x38\xe7\x72\xf8\xfa\xed\x1e\x0e\xbf\xbe\xdf\x8f\xd1\x24\xb2\x78\xe8\x3c\x7e\x09\xfc\xe8\x5f\x4b\x68\x0e\x26\x25\x6e\xc7\xbc\x5e\xfa\x5b\xb5\xb7\xa9\xdd\x0b\xb1\x9b\x2f\xbd\xaa\xb1\x58\x39\x75\x30\xb4\xf2\x9f\x06\x9e\x30\x24\xaa\x95\x9d\x3d\x47\xba\x15\xce\xee\xfd\xc8\xbd\x15\xf1\x46\x65\xfd\x95\x53\x9e\xf2\x1b\xcc\xb4\xcb\xe1\x97\x72\xae\x3e\xd4\x9a\x95\xd3\x2c\x33\xf5\xf1\x21\x03\xac\x06\xfc\xea\xf3\xe9\x61\x6c\xa7\x39\x18\xef\xff\xa9\xb3\x46\x97\x30\xac\x97\x4e\xb4\x7e\x8b\xa4\x17\x7f\x03\x00\x00\xff\xff\x9e\xa4\x09\xf8\x73\x03\x00\x00")

func webStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_webStyleCss,
		"web/style.css",
	)
}

func webStyleCss() (*asset, error) {
	bytes, err := webStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web/style.css", size: 883, mode: os.FileMode(420), modTime: time.Unix(1588683719, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _webAppJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x6d\x6f\xdb\x38\xf2\x7f\x9f\x4f\xa1\x08\x85\x4c\x46\x8a\x62\x7b\xdb\xc5\x1f\x61\xd9\xa2\x4d\x83\x7f\x03\x24\x97\x43\xdc\x5e\xbb\xc9\xfa\x04\x5a\xa2\x6d\x6e\x64\xd2\xa0\xe8\xf8\x29\xfa\xee\x07\x92\x7a\xb4\x9d\xb6\xb8\xdb\x37\x36\xc9\x19\xce\x0c\x87\xf3\xf0\x13\xdd\x45\x46\x9d\x4c\x49\x16\x2b\x17\x3d\x11\xe9\x44\xd1\x13\x49\x17\x34\xc3\x40\x4d\x59\xe6\x79\xfa\x37\x2c\x17\xe1\xf3\xf3\x78\xc1\x63\xc5\x04\x07\x02\x6e\x35\x7f\x86\xd5\x7a\x4e\xc5\xd8\x19\xac\x67\x23\x91\x62\x8c\xdd\x92\xc5\xf5\x3c\xbb\x18\x32\x45\x25\x51\x42\x06\x33\x9c\x79\x9e\x78\xc8\x86\x01\xc3\x5d\xc4\xc6\x60\x06\x25\x55\x0b\xc9\x9d\x59\x18\x93\x34\x05\x02\xea\x55\xe1\x79\x85\x54\x11\xa6\x94\x4f\xd4\x54\xcb\xe5\x8b\xd9\x88\x4a\xb7\xd8\xb1\xe5\x74\xa5\xce\x2b\x73\xe0\xd6\xee\x63\xef\x70\xb9\x07\x0a\xfc\x24\x58\xe2\x74\x51\xb1\xc3\x1c\xe2\x5c\x68\x0b\x98\xef\x0f\x83\x44\x70\x7a\x7e\x2c\x72\x94\xe7\x48\x4d\xa5\x58\x3a\x9c\x2e\x9d\x2f\xeb\x39\xbd\x94\x52\x48\x90\xbd\x77\x6f\x47\x7f\xd1\x58\x39\x2c\x73\xb8\x50\x8e\x39\xc7\x28\xa5\xa1\x7b\xee\xee\x1c\xad\x64\x49\xe8\x98\x71\x9a\x84\x2e\x44\x79\xe1\x50\x49\x49\xb2\xe3\x4e\xbd\xd4\x72\x66\xc0\xad\x3b\x67\x3f\x74\xa7\x78\xd8\xd1\x3a\xd4\xde\x3a\xae\x9c\x28\x8c\x46\x86\x2b\x67\x06\x32\x20\x12\x3f\x0c\x03\x8a\x94\x5c\x6f\x97\x53\x96\x52\x00\x38\xc6\x85\x67\x9e\x9f\xf9\xe9\xe9\xbb\x2e\xf4\xbc\x63\x20\x31\x0b\xb5\x4f\x01\x84\xa1\xf6\x0c\x24\x32\x9c\x2f\xb2\x29\x90\xa1\x71\x1c\x44\xf9\x51\x4c\x54\x3c\x05\x54\x7b\x07\x6e\x29\xde\x9a\xd1\xb9\xf9\xcd\x51\x7e\x34\x66\x9c\xa4\xe9\x7a\xab\x75\xb1\x31\x90\x9e\x77\x2c\x8d\x2c\xcf\x03\x33\xcc\x1e\x5c\x6b\xa7\x3b\x84\xb0\x30\x91\xc1\xc6\x36\x36\x06\x14\xda\x8b\xa0\xa1\x11\x8a\xf2\xfc\xa8\x38\x1b\x91\x85\x43\x2f\x84\x90\x09\xe3\x44\x51\xbc\x9d\x13\x49\xea\x18\xc8\xe0\xb6\x60\xae\x79\xc2\x39\x91\x19\x05\x59\x28\xe9\x3c\x25\x31\x05\x67\xff\xfe\x13\x80\xf0\x04\xfe\x09\x5f\x9d\x05\xee\xab\x9e\x0b\x21\xca\x03\xc3\xd5\x92\xa4\x55\x29\x9c\x85\xd9\x3c\x65\x0a\x74\x82\x8e\x89\x4c\x55\xc4\xd6\x31\xee\xc3\x23\x6b\xaa\x7b\xc5\x9f\x48\xca\x12\x27\x5b\x73\x45\x56\xce\x58\x48\x27\xae\xf4\x67\x26\xbb\xf8\xc4\x2d\x82\xf0\xc1\x68\xba\xe2\x0a\xa8\x87\xee\x10\x06\x8d\x69\x6f\x08\x87\x28\x0f\x94\x18\x98\x1d\xb5\x35\xab\x60\x53\x9d\x6c\xe5\x77\x82\x8e\xbf\x41\x79\x90\xa3\x92\xc1\x59\x64\x54\x7e\x12\x4b\x9e\x0a\x92\x80\x51\xc0\xc9\x8c\xda\x03\x2c\xf0\xd7\xbb\xeb\x30\x96\x94\x28\x6a\x43\xf9\xeb\xdd\x35\x18\x41\xe3\x48\x82\x13\x11\x2f\x66\x94\xab\x82\xe3\x32\xa5\x7a\x06\x3a\xa4\x03\x51\x45\x1b\x89\x64\x1d\x92\xf9\x9c\xf2\xe4\x62\xca\xd2\x04\x10\x88\x48\x38\x95\x74\x8c\x17\x88\x84\x49\xa1\x17\x6b\xad\x88\x84\x71\xca\xe2\x47\xa0\x59\x24\x9d\x89\x27\x0a\x20\xd2\x36\x48\xfa\x24\x1e\x1b\x36\x2c\xf4\xc5\x6b\x2b\xee\x2e\xff\xff\xea\xf6\x1f\xd1\xe0\xea\xfe\x12\xf7\x7e\x3f\xf9\xad\x6f\x6c\x1b\xa5\x24\x7e\xbc\x9a\x91\x09\xc5\x8d\x14\xd7\x14\x49\x96\x58\xa7\xe9\x57\xc6\xd5\xff\x5d\xa4\x64\x36\xa7\xc9\x07\x29\xc9\x1a\x34\x24\x9d\x34\xc7\xaf\x21\x1a\x0b\x09\x6c\x6a\x74\x11\x7b\x2b\xc9\xb2\xb8\x46\xc4\x7c\xfc\x1a\x6e\x25\x59\x3e\xb0\x21\x36\x7f\x7e\xb7\x1c\xf4\xca\x41\x7f\x88\xbb\xc8\x0e\x7f\x1b\xe2\xfe\x9b\x37\xa8\x8a\x4a\x6d\x89\x31\xf3\x13\x51\x04\x48\xb2\x0c\x1a\x9a\x9b\x63\x88\x72\x60\xdd\xfe\x85\xa5\x54\xd7\x18\x04\xaa\x93\x95\x4b\x70\x5b\x8e\x1e\xdc\x51\x2a\x62\x77\x88\xed\x3f\x6a\xac\x33\x31\xa3\x86\x60\x06\x0d\xca\x94\xb2\xc9\x54\x69\x52\x31\x42\x39\xac\x44\x3f\x3f\x57\x43\xbc\xcd\xa1\x35\xe5\x5f\x8c\x2e\xa9\xc4\xa0\xe1\xe2\x2a\xa6\x2c\xad\x70\x7a\x44\x6c\x2d\xd3\xe5\x0b\xeb\x1f\x64\x0a\x99\xa4\x13\x26\x78\x86\x41\x44\xf0\x36\x0f\x22\xf2\x50\xea\x08\xb5\xd9\x43\x73\x51\x37\x64\x0e\x60\x9b\xa6\x2d\x7f\x89\x68\x6d\x6f\x53\xa1\x55\xa7\x4b\x23\x6e\x69\xb0\xeb\x73\x91\x7d\xc7\xdd\x6a\x7c\x5f\x8e\x33\xb6\xa1\xb8\x71\x07\x75\xc2\xbc\x02\x2c\xb1\x27\xa3\x75\x12\x4c\xa8\x2a\x32\xe0\xe3\xfa\x2a\xd1\x1c\xa6\xba\xd2\x2a\xd1\x0b\xaa\xd3\x71\x7d\x96\xf8\x6e\xc7\xe1\xc2\x19\x8b\x05\x4f\x1c\xc6\x9d\x4f\xb7\x37\x65\x8e\x3b\x14\xe5\x47\xc6\x02\x53\x07\xb2\x3b\xe3\x26\xfc\x0a\x74\x9a\xf3\x4e\x71\x2a\xbb\xf6\x31\x15\x71\xcd\xa1\x67\x15\x9d\xf0\x27\x92\x45\x34\x35\x64\x33\xe9\x27\x1d\x7b\x81\x31\x6e\xb3\xe8\x33\x5c\x08\xae\x74\x19\xef\x18\x2e\x7d\x82\xb8\x3c\x41\xe7\x82\x70\xd3\xa5\x6c\xbe\x3b\x76\x5f\xa7\xa5\x27\x56\x2b\x1c\xa3\x57\xa0\xa3\x0a\x47\x5b\x5b\x42\x92\x24\x97\x4f\x94\xab\x6b\x96\x29\xca\xa9\x04\x1d\x93\xe9\x9d\xa0\x11\x3c\xc5\xf1\xa3\xea\xb6\x2e\xa6\x84\x4f\x28\x68\xdd\x19\x44\x39\x6c\xc9\xd7\xd1\xf0\xb7\x29\xd0\xc2\x76\x35\x7c\x36\x21\xf5\x77\xa9\xb0\x01\x6a\x74\x8c\xa9\x6e\x87\x9d\x22\x0d\xc2\xbf\x32\x7d\xab\xa1\x9a\x52\x5e\xa7\x94\xa4\xf3\x4a\xa8\xa4\x73\xc3\x04\xf4\xee\x5d\xbe\xa2\xe7\xd0\xa8\x17\x44\xc4\xb4\xeb\xb2\x6a\xc9\x2c\xea\xe1\x12\x83\x69\xc6\x40\xaf\x44\x3d\xac\xff\x8a\x9e\x8d\x8e\xed\x9a\x69\xb7\x68\x9f\x6e\x85\xc7\xc5\x62\xd4\xb3\x3d\xdd\x04\xd1\x23\x8e\xa3\xde\x0f\xfa\x23\x8a\x9a\xc9\xbe\x93\xe2\x61\x46\x15\x78\x0c\xf8\x22\x4d\x5f\x66\x34\xf9\xfe\x2b\x9c\x45\xf2\xb7\x58\xf3\x0a\x76\x68\xbb\xe1\x96\x46\xbd\x0a\x78\xe8\x95\x43\xc0\xc3\x1c\x51\xa3\x8f\xda\x27\x9e\xa7\xab\x94\xf1\x88\xbd\x0d\x08\x23\x62\x41\x88\x5e\xdc\xc5\x21\x51\xaf\x44\x22\x51\xaf\xc6\x22\xd6\xec\x44\x92\xe5\x87\x34\x35\xb7\x88\x96\x8c\x27\x62\x79\x20\xb4\x74\x53\x7c\x39\xb2\x24\xd5\xd5\xe9\x27\x22\x2c\xd3\xff\x28\xe4\x91\xae\x75\x8f\x6e\x48\xa1\x70\x9b\x2d\x99\x71\x69\xf8\x48\xd7\x70\x1b\x93\x8c\x3a\x9d\xd3\xce\xb9\x15\xbb\x11\x62\x76\xbb\xd0\x41\x65\xb5\x21\x4b\xf7\x9b\xf4\x2b\xbe\x4b\xfe\x20\xa5\x58\x5e\xd3\xb1\x2a\xd9\x74\x59\x3e\xc5\x51\x55\x8a\xcf\x5e\xa3\x91\xa4\xe4\xb1\xc9\x7f\x67\x32\xb3\xb1\xc1\xff\xc9\x86\xaf\xf3\x06\xf7\xfd\xcf\xc4\x6b\x50\xd4\xe4\xff\x81\xf4\x6e\xd3\x0a\x1c\x35\x9b\x49\x74\xb8\x9b\x34\x77\x67\xe5\xee\xba\x14\x2b\xf1\x31\x15\xa3\x3a\xc1\x47\xd5\xe5\xb5\xe1\xda\x31\xc6\x3a\xd0\x3d\x4f\x8f\x2c\x2c\x7f\x3f\x3a\xd7\xed\xcf\xec\x87\x41\xd5\xa0\x52\x11\x13\x2d\x2a\x9c\x8a\x4c\x69\xb8\xe5\xbb\x91\xeb\xdf\x10\x35\x0d\x95\x5c\xf0\xb8\x89\x80\xce\x6a\xa3\x61\xcd\x36\x4e\x85\x90\xa0\x3e\x67\x9b\x2b\x3c\xcc\x75\xbf\xc3\x35\xe7\x13\xd7\x84\x5c\x71\xfd\x09\x1d\x93\x45\xaa\xce\x8b\xe9\xc1\x2c\xd9\xf1\xcd\x7e\x94\xce\xc4\x22\x33\x78\xb1\x19\xa7\x9a\xc5\x16\xae\x15\x6e\x1c\xb3\x71\x00\xdf\xf0\x84\x2b\x78\xf2\xc2\xd9\x4d\x85\xdb\x1c\xde\x7d\x5f\xec\x5e\xbf\xbc\x3b\xda\x69\xd1\x21\xe3\x9c\xca\x2f\x74\xa5\xf0\xca\x77\x03\xc7\xf5\x37\x2d\x1e\xdb\xda\x1b\x5c\x0d\x87\xae\xce\x9a\x78\xd0\xee\x6e\x90\x37\x2d\xb2\x85\x1e\xc6\xbc\xd1\x42\x29\xc1\x33\x58\x60\x4e\xd4\xcc\x2e\xcb\xa1\xfd\xa6\x23\xe4\x3b\x6a\xa6\x46\x9b\xf6\x07\xfa\x6f\xae\x65\x39\xa5\x34\x3d\x7c\x25\x49\xa1\x20\xa1\xa9\x22\x7f\x68\x7b\x93\x77\x5d\xb8\xdd\x2d\x21\xf9\x11\x4d\x33\xea\x68\xf2\xdb\x16\xd9\x54\x90\x3c\xd7\x1c\x16\x6b\x86\x73\x29\x94\xd0\x2d\xb7\xd1\x77\x6b\xf8\xaf\xcc\x27\xbe\x3a\xc6\x55\x67\x86\xdb\x1a\x16\x2a\xb4\x7b\xba\x1c\xed\x89\xb5\x6a\x71\xfb\xd1\xa0\xba\xed\xb7\xcd\xec\x3e\xe9\xfd\x5e\x88\xd7\xa4\x13\xdc\xff\x55\xf9\xb7\x0b\xf5\x92\x82\x77\x4d\x05\x67\x2d\x05\x67\xbf\xa6\xc0\x16\xfc\xa6\xfc\x9d\x1b\x5c\xb2\x44\x4d\x71\xd1\x0b\x4c\x14\x7e\xd3\x2b\xbb\x17\x6d\xfb\x6c\x8b\xcf\x82\xa4\x3d\x23\xf6\x6d\x28\x88\xbb\xdf\x65\x34\xea\x1b\xdc\xd2\x86\x92\xe1\x98\xa5\xe9\x40\xad\x53\x8a\x3b\xe6\x9b\x6e\x0f\x6c\x1a\x8e\x3b\x1a\x2b\xd0\x0d\xba\xc1\xa1\xe3\xec\x2e\x96\x00\x4c\x6b\xfd\x8e\xab\x64\x30\xf3\xfb\x6a\x7e\x6f\xe6\x03\x5c\xb9\xd8\xcc\xbf\xed\x02\x66\xa3\xc1\x90\x3e\xef\x92\xac\x1e\xfb\xcd\x56\x07\x5d\x0b\x99\x45\xa3\x1a\x97\xb5\x10\x4d\xc5\x3e\xd4\x1d\x36\x03\x10\x06\x51\x8c\xa3\x51\x85\xd6\xa2\xd8\x22\xb5\xe6\x6a\x81\xd1\x32\x1c\xc5\x0d\x78\x16\x25\xd8\x3e\x18\x81\xbd\x57\x8d\x38\x83\x41\x1f\x06\x2b\x1c\x25\x0f\xdd\x61\xb0\xd1\xff\x3d\xf3\x26\x04\x56\x7e\x0f\x9e\x0c\xde\x7d\xf7\xbc\xd5\xc9\xe0\xed\x77\xff\x9b\xe7\x81\x8d\x5d\xbb\xf7\xbc\xcd\xc9\xe0\xed\xbd\xff\xb9\x08\x1f\x7d\xa3\xe6\x23\x16\xac\x82\x4d\xf0\xc5\xfa\x7b\x42\xd5\x6d\xdd\xa5\x0c\x01\xea\xa0\xac\xd1\x58\xdf\xa2\xb1\x7e\x8d\xc6\xfa\x07\xd1\x58\x14\x7b\x5e\x79\x5e\x8b\xc2\xa2\xd1\x1e\x06\x8b\x46\x7b\x08\xac\x5f\x21\xb0\x7e\x85\xc0\x0e\xc4\x63\xcb\x50\xdc\x7c\x34\x09\x8a\x4a\xd5\xf8\x6c\xb5\x78\xb7\xe1\xc8\xf2\xb5\xc5\x3c\xb2\xd8\xe7\xb3\xd9\x04\xb7\xef\x72\xa8\x75\x80\x47\x53\x93\xd9\x6c\x72\x6c\xfa\x75\x59\x8e\x35\x3f\xda\xe5\xb7\xf8\xb5\x7e\xc4\x28\x24\xe3\xea\xb9\x00\xbc\xf8\x4c\xc0\x42\xb1\x73\x92\xb2\x68\xee\xc9\x67\xb0\x51\xd3\xeb\x0b\x54\x9a\x90\x23\x16\x66\x32\xc6\xca\x77\xcf\x5c\x7f\x65\x9a\xfb\xa6\x68\xde\xe5\x67\x6a\x6d\xdf\x4b\x79\xbe\xf3\x02\xb3\x22\xc1\x86\x68\xf9\xb3\xc9\x7e\x31\x2e\xdb\xd3\xa1\xb4\x5b\x49\xbc\x22\x27\x83\xd3\x76\xb2\x6e\x24\xde\x34\x57\xef\x0b\x07\x3b\x8c\x67\x8a\xf0\x98\x8a\xb1\xf3\xf9\xcb\xcd\xb5\xb1\xa2\xf8\xf8\x6e\x57\x3c\x5d\x3f\x98\xa6\x0e\x66\x42\xa8\x29\xe3\x93\x4b\x4e\x46\x29\x4d\xf0\x98\xa4\x19\xdd\xab\x35\xb5\xa3\xd8\x6c\x12\xac\x64\xb0\x91\xc1\x20\x18\x94\x5d\x6a\x4f\xf6\x7c\xa1\xea\xd7\x9d\x7a\x8b\xae\x54\xc5\xb6\xdd\x1d\x99\x92\xe2\x91\x16\x15\x4f\x48\xdd\xc2\xf6\x4b\x5e\xca\x38\x35\x75\x19\xf7\xc3\x37\x7b\x54\x2b\x02\xe8\x58\xf9\x27\x51\xd3\xfe\x27\xe0\xde\xb8\xfe\x4a\xfa\xae\x86\x1b\xfa\xef\xc9\xf5\x07\xbe\xeb\x4c\xed\xdf\x93\xeb\x9f\xea\xff\x8d\x79\xca\x2c\x2f\xd7\xde\x27\xca\x01\x84\xe8\xe0\x03\xcf\x8c\x30\x3d\xd7\x6a\xca\xb7\x1e\x94\x1f\x55\x60\x53\x57\x9c\xf5\x40\x11\x45\x31\x36\xdf\x32\x8c\x4f\x3a\xef\x2b\xf2\x3e\x54\xf8\x74\x7b\x63\x9e\x1e\xb8\xba\x16\x24\xa1\x49\x27\xd0\x1a\x82\xad\xe0\x31\x3d\x57\x72\x41\x73\x78\x6e\x75\x5a\xa3\xfe\x13\x00\x00\xff\xff\x7e\xa7\x91\xca\x7b\x18\x00\x00")

func webAppJsBytes() ([]byte, error) {
	return bindataRead(
		_webAppJs,
		"web/app.js",
	)
}

func webAppJs() (*asset, error) {
	bytes, err := webAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web/app.js", size: 6267, mode: os.FileMode(436), modTime: time.Unix(1610646370, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"web/index.html": webIndexHtml,
	"web/style.css":  webStyleCss,
	"web/app.js":     webAppJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"web": &bintree{nil, map[string]*bintree{
		"app.js":     &bintree{webAppJs, map[string]*bintree{}},
		"index.html": &bintree{webIndexHtml, map[string]*bintree{}},
		"style.css":  &bintree{webStyleCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
